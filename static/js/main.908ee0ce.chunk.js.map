{"version":3,"sources":["components/ContactCard.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","props","hasWorkPhone","state","workPhone","className","name","mobilePhone","email","style","width","color","this","Component","App","contacts","map","contact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OA4CeA,E,kDAxCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,aAAe,WACb,GAA4B,MAAxB,EAAKC,MAAMC,UACb,OAAO,wBAAIC,UAAU,mBAAmB,EAAKF,MAAMC,YAVrD,EAAKD,MAAQ,CACXG,KAAM,EAAKL,MAAMK,KACjBC,YAAa,EAAKN,MAAMM,YACxBH,UAAW,EAAKH,MAAMG,UACtBI,MAAO,EAAKP,MAAMO,OANH,E,qDA6BjB,OAXE,yBAAKH,UAAU,OAAOI,MAAO,CAAEC,MAAO,UACpC,yBAAKL,UAAU,sBAAsBI,MAAO,CAAEE,MAAO,UAClDC,KAAKT,MAAMG,MAEd,wBAAID,UAAU,+BACZ,wBAAIA,UAAU,mBAAmBO,KAAKT,MAAMI,aAC3CK,KAAKV,eACN,wBAAIG,UAAU,mBAAmBO,KAAKT,MAAMK,a,GA1B5BK,aCoDXC,G,wDAlDb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDE,MAAQ,CACXY,SAAU,CACR,CACET,KAAM,eACNC,YAAa,eACbH,UAAW,eACXI,MAAO,0BAET,CACEF,KAAM,gBACNC,YAAa,eACbC,MAAO,2BAET,CACEF,KAAM,iBACNC,YAAa,eACbH,UAAW,eACXI,MAAO,8BAnBI,E,qDA0BjB,IAAMO,EAAWH,KAAKT,MAAMY,SAASC,KAAI,SAACC,GACxC,OACE,oCACE,6BACA,kBAAC,EAAD,CACEX,KAAMW,EAAQX,KACdC,YAAaU,EAAQV,YACrBH,UAAWa,EAAQb,UACnBI,MAAOS,EAAQT,QAEjB,iCAKN,OACE,oCACE,wBAAIC,MAAO,CAAEE,MAAO,WAApB,gBACCI,O,GA7CSF,cCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.908ee0ce.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ContactCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: this.props.name,\r\n      mobilePhone: this.props.mobilePhone,\r\n      workPhone: this.props.workPhone,\r\n      email: this.props.email,\r\n    };\r\n  }\r\n\r\n  hasWorkPhone = () => {\r\n    if (this.state.workPhone != null) {\r\n      return <li className=\"list-group-item\">{this.state.workPhone}</li>;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const card = (\r\n      <div className=\"card\" style={{ width: \"18rem\" }}>\r\n        <div className=\"card-header bg-dark\" style={{ color: \"white\" }}>\r\n          {this.state.name}\r\n        </div>\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li className=\"list-group-item\">{this.state.mobilePhone}</li>\r\n          {this.hasWorkPhone()}\r\n          <li className=\"list-group-item\">{this.state.email}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n    return card;\r\n  }\r\n}\r\n\r\nContactCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  mobilePhone: PropTypes.string.isRequired,\r\n  workPhone: PropTypes.string,\r\n  email: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactCard;\r\n","import React, { Component } from \"react\";\nimport ContactCard from \"./components/ContactCard\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [\n        {\n          name: \"Manahil Sher\",\n          mobilePhone: \"123-345-7890\",\n          workPhone: \"012-345-6789\",\n          email: \"manahil.sher@gmail.com\",\n        },\n        {\n          name: \"Somebody Else\",\n          mobilePhone: \"246-810-1214\",\n          email: \"somebody.else@gmail.com\",\n        },\n        {\n          name: \"Another Person\",\n          mobilePhone: \"369-121-5182\",\n          workPhone: \"281-512-1963\",\n          email: \"another.person@gmail.com\",\n        },\n      ],\n    };\n  }\n\n  render() {\n    const contacts = this.state.contacts.map((contact) => {\n      return (\n        <>\n          <br></br>\n          <ContactCard\n            name={contact.name}\n            mobilePhone={contact.mobilePhone}\n            workPhone={contact.workPhone}\n            email={contact.email}\n          />\n          <br></br>\n        </>\n      );\n    });\n\n    return (\n      <>\n        <h1 style={{ color: \"purple\" }}>Contact Card</h1>\n        {contacts}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}